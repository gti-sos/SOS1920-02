{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Analytics.svelte",
    "../../GraphAccidents.svelte",
    "../../GraphRoutes.svelte",
    "../../GraphRoutesV2.svelte",
    "../../04.svelte",
    "../../05.svelte",
    "../../06.svelte",
    "../../07.svelte",
    "../../08.svelte",
    "../../09.svelte",
    "../../12.svelte",
    "../../27.svelte",
    "../../GraphTourism.svelte.html"
  ],
  "sourcesContent": [
    "<script>\n    import {\n        pop\n    } from \"svelte-spa-router\";\n\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    async function loadGraph() {\n\n        let MyDataA = [];\n        let MyDataC = [];\n        let MyDataT = [];\n        let MyDataGraph = [];\n\n        const resDataA = await fetch(\"/api/v2/traffic-accidents\");\n        MyDataA = await resDataA.json();\n        const resDataC = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyDataC = await resDataC.json();\n        const resDataT = await fetch(\"/api/v2/rural-tourism-stats\");\n        MyDataT = await resDataT.json();\n        MyDataA.forEach( (x) => {\n            MyDataC.forEach( (y) => {\n                MyDataT.forEach( (z) => {\n                    if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    } else if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    } else if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    } else if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    } else if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    } else if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    } else if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    } else if (x.province == y.province && x.province == z.province && x.year == y.year && x.year == z.year) {\n                        MyDataGraph.push({name: x.province, children: [\n                            {name: \"Accidentes\", children: [\n                                {name: \"Accidentes con víctimas\", value: parseInt(x.trafficaccidentvictim)},\n                                {name: \"Fallecidos\", value: parseInt(x.dead)},\n                                {name: \"Heridos\", value: parseInt(x.injured)}\n                            ]},\n                            {name: \"Carril bici\", children: [\n                                {name: \"Metropolitano\", value: parseFloat(y.metropolitan)},\n                                {name: \"Urbano\", value: parseFloat(y.urban)},\n                                {name: \"Resto\", value: parseFloat(y.rest)}\n                            ]},\n                            {name: \"Turismo\", children: [\n                                {name: \"Viajero\", value: parseFloat(z.traveller)},\n                                {name: \"Pernoctación\", value: parseFloat(z.overnightstay)},\n                                {name: \"Estancia media\", value: parseFloat(z.averagestay)}\n                            ]}\n                        ]});\n                    }\n                })\n            });\n        });\n\n        am4core.useTheme(am4themes_kelly);\n        am4core.useTheme(am4themes_animated);\n        // Themes end\n\n        var chart = am4core.create(\"chartdiv\", am4plugins_forceDirected.ForceDirectedTree);\n        var networkSeries = chart.series.push(new am4plugins_forceDirected.ForceDirectedSeries())\n\n        chart.data = [{\n            name: \"Andalucia\",\n            children: MyDataGraph\n        }];\n\n        networkSeries.dataFields.value = \"value\";\n        networkSeries.dataFields.name = \"name\";\n        networkSeries.dataFields.children = \"children\";\n        networkSeries.nodes.template.tooltipText = \"{name}:{value}\";\n        networkSeries.nodes.template.fillOpacity = 1;\n\n        networkSeries.nodes.template.label.text = \"{name}\"\n        networkSeries.fontSize = 10;\n\n        networkSeries.links.template.strokeWidth = 1;\n\n        var hoverState = networkSeries.links.template.states.create(\"hover\");\n        hoverState.properties.strokeWidth = 3;\n        hoverState.properties.strokeOpacity = 1;\n\n        networkSeries.nodes.template.events.on(\"over\", function(event) {\n            event.target.dataItem.childLinks.each(function(link) {\n                link.isHover = true;\n            })\n            if (event.target.dataItem.parentLink) {\n                event.target.dataItem.parentLink.isHover = true;\n            }\n\n        })\n\n        networkSeries.nodes.template.events.on(\"out\", function(event) {\n            event.target.dataItem.childLinks.each(function(link) {\n                link.isHover = false;\n            })\n            if (event.target.dataItem.parentLink) {\n                event.target.dataItem.parentLink.isHover = false;\n            }\n        })\n\n    }\n\nloadGraph();\n\n</script>\n\n<svelte:head>\n\n</svelte:head>\n\n<main>\n    <h2 style=\"text-align: center;\">Analisis de todos los datos de los miembros de SOS1920-02</h2>\n\n    <Button outline color=\"secondary\" on:click=\"{pop}\">Volver</Button>\n\n    <div id=\"chartdiv\"></div>\n\n</main>\n\n<style>\n    body {\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    }\n\n    #chartdiv {\n        width: 100%;\n        height:550px;\n        max-width:100%;\n    }\n</style>",
    "<script>\n\n    import {\n        pop\n    } from \"svelte-spa-router\";\n\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    async function loadGraph() {\n\n        let MyData = [];\n        let MyDataGraph = [];\n\n        const resData = await fetch(\"/api/v2/traffic-accidents\");\n        MyData = await resData.json();\n        MyData.forEach( (x) => {\n            MyDataGraph.push({name: x.province + \" \" + x.year, data: [parseInt(x.trafficaccidentvictim), parseInt(x.dead), parseInt(x.injured)], pointPlacement: 'on'});\n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column',\n            },\n            title: {\n                text: 'Accidentes de Tráfico'\n            },\n            subtitle: {\n                text: 'Estadísticas de los accidentes de tráfico 2015'\n            },\n            xAxis: {\n                categories: [\n                    'Víctimas de accidentes',\n                    'Fallecidos',\n                    'Heridos'\n                ],\n                crosshair: true\n            },\n            yAxis: {\n                title: {\n                    text: 'Números'\n                }\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n                pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n                    '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n                footerFormat: '</table>',\n                shared: true,\n                useHTML: true\n            },\n            plotOptions: {\n                column: {\n                    pointPadding: 0.2,\n                    borderWidth: 0\n                }\n            },\n            series: MyDataGraph,\n            responsive: {\n                condition: {\n                    maxWidth: 500\n                },\n                chartOptions: {\n                    legend: {\n                        layout: 'horizontal',\n                        align: 'center',\n                        verticalAlign: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<main>\n\n    <h2 style=\"text-align: center;\"> <i class=\"fas fa-car\"></i> Estadísticas de accidentes de tráfico</h2>\n\n    <Button outline color=\"secondary\" on:click=\"{pop}\">Volver</Button>\n\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p class=\"highcharts-description\">\n            En la gráfica podemos observar el número de: accidentes de tráfico con víctimas, fallecidos y heridos en accidentes de tráfico.\n        </p>\n    </figure>\n\n</main>\n\n<style>\n\n    .highcharts-figure, .highcharts-data-table table {\n        min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n    }\n\n    #container {\n        height: 600px;\n    }\n\n    .highcharts-data-table table {\n        font-family: Verdana, sans-serif;\n        border-collapse: collapse;\n        border: 1px solid #EBEBEB;\n        margin: 10px auto;\n        text-align: center;\n        width: 100%;\n        max-width: 500px;\n    }\n    .highcharts-data-table caption {\n        padding: 1em 0;\n        font-size: 1.2em;\n        color: #555;\n    }\n    .highcharts-data-table th {\n        font-weight: 600;\n        padding: 0.5em;\n    }\n    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n        padding: 0.5em;\n    }\n    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n        background: #f8f8f8;\n    }\n    .highcharts-data-table tr:hover {\n        background: #f1f7ff;\n    }\n\n</style>",
    "<script>\n\n    import {pop} from \"svelte-spa-router\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    async function loadGraph() {\n        let MyData = [];\n        let MyDataGraph = [];\n\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        MyData.forEach( (x) => {\n            MyDataGraph.push({name: x.province + \" \" + x.year, data: [parseInt(x.metropolitan), parseInt(x.urban), parseInt(x.rest)]});\n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'line'\n            },\n            title: {\n                text: 'Carriles Bici'\n            },\n            subtitle: {\n                text: 'Estadísticas de los carriles bici'\n            },\n            \n            xAxis: {\n                categories: [\n                    'Metropolitano',\n                    'Urbanos',\n                    'Resto'\n                ],\n                crosshair: true\n            },\n            yAxis: {\n                title: {\n                    text: 'Números'\n                }\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n                pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n                    '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n                footerFormat: '</table>',\n                shared: true,\n                useHTML: true\n            },\n            plotOptions: {\n                column: {\n                    pointPadding: 0.2,\n                    borderWidth: 0\n                }\n            },\n            series: MyDataGraph,\n            responsive: {\n                condition: {\n                    maxWidth: 500\n                },\n                chartOptions: {\n                    legend: {\n                        layout: 'horizontal',\n                        align: 'center',\n                        verticalAlign: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/series-label.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<main>\n\n    <h3 style=\"text-align: center;\"> <i class=\"fas fa-bicycle\"></i> Estadísticas de carriles bici</h3>\t\n\n    <Button outline color=\"secondary\" on:click=\"{pop}\">Volver</Button>\n\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p class=\"highcharts-description\">\n            En la gráfica podemos observar el número de: carriles bici en redes metropolitanas, urbanas y resto.\n        </p>\n    </figure>\n\n</main>\n\n<style>\n\n    .highcharts-figure, .highcharts-data-table table {\n        min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n    }\n\n    #container {\n        height: 600px;\n    }\n\n    .highcharts-data-table table {\n        font-family: Verdana, sans-serif;\n        border-collapse: collapse;\n        border: 1px solid #EBEBEB;\n        margin: 10px auto;\n        text-align: center;\n        width: 100%;\n        max-width: 500px;\n    }\n    .highcharts-data-table caption {\n        padding: 1em 0;\n        font-size: 1.2em;\n        color: #555;\n    }\n    .highcharts-data-table th {\n        font-weight: 600;\n        padding: 0.5em;\n    }\n    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n        padding: 0.5em;\n    }\n    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n        background: #f8f8f8;\n    }\n    .highcharts-data-table tr:hover {\n        background: #f1f7ff;\n    }\n\n</style>",
    "<script>\n    import {onMount} from \"svelte\";\n    import {pop} from \"svelte-spa-router\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n\n    async function loadGraph() {\n\n        let MyData = [];\n        let MyDataGraph = [];\n\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        MyData.forEach( (x) => {\n            if (x.year == 2015) {\n                //MyDataGraphM.push(parseFloat(x.metropolitan));\n                //MyDataGraphL.push(x.province);\n                MyDataGraph.push({province: x.province + \" \" + x.year, kilometres: [parseInt(x.metropolitan)]});\n            }\n        });\n\n        am4core.ready(function() {\n\n            // Themes begin\n            am4core.useTheme(am4themes_dataviz);\n            am4core.useTheme(am4themes_animated);\n            // Themes end\n\n            // Create chart instance\n            var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\n            \n            // Add data\n            chart.data = MyDataGraph;\n\n            // Set inner radius\n            chart.innerRadius = am4core.percent(50);\n\n            // Add and configure Series\n            var pieSeries = chart.series.push(new am4charts.PieSeries());\n            pieSeries.dataFields.value = \"kilometres\";\n            pieSeries.dataFields.category = \"province\";\n            pieSeries.slices.template.stroke = am4core.color(\"#fff\");\n            pieSeries.slices.template.strokeWidth = 2;\n            pieSeries.slices.template.strokeOpacity = 1;\n\n            // This creates initial animation\n            pieSeries.hiddenState.properties.opacity = 1;\n            pieSeries.hiddenState.properties.endAngle = -90;\n            pieSeries.hiddenState.properties.startAngle = -90;\n\n            });\n    }\n    \n    loadGraph();\n</script>\n\n<svelte:head>    \n\n</svelte:head>\n\n<style>\n    #chartdiv {\n      width: 100%;\n      height: 500px;\n    }\n    \n</style>\n\n<main>\n\n    <h3 style=\"text-align: center;\"> <i class=\"fas fa-bicycle\"></i> Estadísticas carril metropolitano en 2015</h3>\t\n\n    <Button outline color=\"secondary\" on:click=\"{pop}\">Volver</Button>\n\n    <div id=\"chartdiv\"></div>\n\n</main>",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"http://sos1920-04.herokuapp.com/api/v1/roads/\";\n\n    let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n        console.log(\"Loading integration API 4...\");\t\n\t\tconst res = await fetch(url); \n\t\tif (res.ok) {\n\t\t\tconsole.log(\"Ok, loaded successfully\");\n\t\t\tconst json = await res.json();\n            apiExterna = json;\n\t\t} else {\n\t\t\tconsole.log(\"ERROR!\");\n        }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"Un carril\", \"Doble carril\", \"Autovía\", \"Autopista\"];\n        let valores = [];\n        let valor = {};\n        MyData.forEach((r) => {\n            apiExterna.forEach((v) => {\n                //if(r.year == 2018 && v.year ==2018){\n                    if(v.province.toLowerCase() == r.province){\n                        valor = {\n                            name: r.province,\n                            data: [r.metropolitan, r.urban, r.rest,\n                            v['oneway'], v['multipleway'], v['dualCarriagewayAndHighway'],v['highwayWithToll']]\n                            }\n                        valores.push(valor);\n                    }\n                //}\n            });    \n        });\n\n      \n            \n\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API Grupo 04'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i></Button>\n</p>\n\n<figure class=\"highcharts-figure\">\n    {#await  apiExterna}\n    Loading renewable sources...\n    {:then  apiExterna}\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p>   </p>\n        <p class=\"highcharts-description\">\n            Insertar texto\n        </p>\n        <p> <strong> Tabla con los datos proporcionados por la API 04 </strong> </p>\n\n    </figure>\t\n\n    \n\n    <Table bordered>\n        <thead>\n            <tr>\n                <th> Provincia </th>\n                <th> Año </th>\n                <th> Un carril</th>\n                <th> Doble carril </th>\n                <th> Autovía </th>\n                <th> Autopista</th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each  apiExterna as apiExterna}\n            <tr>\n                <td> {apiExterna.province} </td>\n                <td> {apiExterna.year} </td>\n                <td> {apiExterna['oneway']} </td>\n                <td> {apiExterna['multipleway']} </td>\n                <td> {apiExterna['dualCarriagewayAndHighway']} </td>\n                <td> {apiExterna['highwayWithToll']} </td>\n            </tr>\n            {/each}\n        </tbody>\n    </Table>\n{/await}      \t\n\n  </figure>\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>\n\n\n",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"https://sos1920-05.herokuapp.com/api/v1/health_public\";\n\n    let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n        console.log(\"Loading integration API 5...\");\t\n\t\tconst res = await fetch(url); \n\t\tif (res.ok) {\n\t\t\tconsole.log(\"Ok, loaded successfully\");\n\t\t\tconst json = await res.json();\n            apiExterna = json;\n\t\t} else {\n\t\t\tconsole.log(\"ERROR!\");\n        }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"Total\", \"Publico\", \"Publico_Pib\"];\n        let valores = [];\n        let metropolitan = [];\n        let urban = [];\n        let rest = [];\n        let sumaMetropolitan;\n        let sumaUrban;\n        let sumaRest;\n        let valor = {};\n        let spain = [];\n        MyData.forEach((r) => {\n            if(r.year==2015){\n            valor = {\n                   name: r.province,\n                   data: [r.metropolitan, r.urban, r.rest, 0, 0, 0]\n               }\n            valores.push(valor);\n            }\n        });\n\n        apiExterna.forEach((v) => {           \n            valor = {\n                name: v.country,\n                data: [0,0,0,v['total_spending'], v['public_spending'], v['public_spending_pib']]\n            }\n            valores.push(valor);        \n            \n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API Grupo 05'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i></Button>\n</p>\n\n<figure class=\"highcharts-figure\">\n    {#await  apiExterna}\n    Loading renewable sources...\n    {:then  apiExterna}\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p>   </p>\n        <p class=\"highcharts-description\">\n            Insertar texto\n        </p>\n        <p> <strong> Tabla con los datos proporcionados por la API 05 </strong> </p>\n\n    </figure>\t\n\n    \n\n    <Table bordered>\n        <thead>\n            <tr>\n                <th> País </th>\n                <th> Año </th>\n                <th> Total</th>\n                <th> Publico </th>\n                <th> Publico_Pib </th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each  apiExterna as apiExterna}\n            <tr>\n                <td> {apiExterna.country} </td>\n                <td> {apiExterna.year} </td>\n                <td> {apiExterna['total_spending']} </td>\n                <td> {apiExterna['public_spending']} </td>\n                <td> {apiExterna['public_spending_pib']} </td>\n            </tr>\n            {/each}\n        </tbody>\n    </Table>\n{/await}      \t\n        \n  </figure>\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>\n\n\n",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"https://sos1920-06.herokuapp.com/api/v2/not-hospitalized-stats\";\n\n    let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n        console.log(\"Loading integration API 6...\");\t\n\t\tconst res = await fetch(url); \n\t\tif (res.ok) {\n\t\t\tconsole.log(\"Ok, loaded successfully\");\n\t\t\tconst json = await res.json();\n            apiExterna = json;\n\t\t} else {\n\t\t\tconsole.log(\"ERROR!\");\n        }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"Totales\", \"Interurbanos\", \"Urbanos\"];\n        let valores = [];\n        let valor = {};\n\n        MyData.forEach((r) => {\n            apiExterna.forEach((v) => {\n                //if(r.year == 2018 && v.year ==2018){\n                    if(v.province.toLowerCase() == r.province){\n                        valor = {\n                            name: r.province,\n                            data: [r.metropolitan, r.urban, r.rest,\n                            v['total'], v['interurban'], v['urban']]\n                            }\n                        valores.push(valor);\n                    }\n                //}\n            });    \n        });\n\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API Grupo 06'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i></Button>\n</p>\n\n<figure class=\"highcharts-figure\">\n    {#await  apiExterna}\n    Loading renewable sources...\n    {:then  apiExterna}\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p>   </p>\n        <p class=\"highcharts-description\">\n            Insertar texto\n        </p>\n        <p> <strong> Tabla con los datos proporcionados por la API 06 </strong> </p>\n\n    </figure>\t    \n\n    <Table bordered>\n        <thead>\n            <tr>\n                <th> Provincia </th>\n                <th> Año </th>\n                <th> Totales</th>\n                <th> Interurbanos </th>\n                <th> Urbanos </th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each  apiExterna as apiExterna}\n            <tr>\n                <td> {apiExterna.province} </td>\n                <td> {apiExterna.year} </td>\n                <td> {apiExterna['total']} </td>\n                <td> {apiExterna['interurban']} </td>\n                <td> {apiExterna['urban']} </td>\n            </tr>\n            {/each}\n        </tbody>\n    </Table>\n{/await}      \t\n\n  </figure>\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>\n\n\n",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"https://sos1920-07.herokuapp.com/api/v2/imports\";\n\n    let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n        console.log(\"Loading integration API 7...\");\t\n\t\tconst res = await fetch(url); \n\t\tif (res.ok) {\n\t\t\tconsole.log(\"Ok, loaded successfully\");\n\t\t\tconst json = await res.json();\n            apiExterna = json;\n\t\t} else {\n\t\t\tconsole.log(\"ERROR!\");\n        }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"Malta\", \"Cebada\", \"Avena\", \"Desperdicios\",\"Alcohol\"];\n        let valores = [];\n        let valor = {};\n        MyData.forEach((r) => {\n            if(r.year==2015){\n            valor = {\n                   name: r.province,\n                   data: [r.metropolitan, r.urban, r.rest, 0, 0, 0, 0, 0]\n               }\n            valores.push(valor);\n            }\n        });\n        apiExterna.forEach((v) => {   \n            if(v.year==2000 && v.country!=\"total\"){        \n               valor = {\n                   name: v.country,\n                   data: [0, 0, 0, v['gdamalt']/1000, v['gdabarley']/1000, v['gdaoat']/3000, v['gdawaste']/1000, v['gdaethylalcohol']/1000]\n               }               \n               valores.push(valor);\n            }\n            \n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API 07'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i> </Button>\n</p>\n\n<figure class=\"highcharts-figure\">\n    {#await  apiExterna}\n    Loading renewable sources...\n    {:then  apiExterna}\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p>   </p>\n        <p class=\"highcharts-description\">\n            Se ha tenido que disminuir el valor de la api externa ya que impedía que los datos de la api interna pudieran aparecen en la gráfica\n        </p>\n        <p> <strong> Tabla con los datos proporcionados por la API 07 </strong> </p>\n\n    </figure>\t    \n\n    <Table bordered>\n        <thead>\n            <tr>\n                <th> País </th>\n                <th> Año </th>\n                <th> Totales</th>\n                <th> Interurbanos </th>\n                <th> Urbanos </th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each  apiExterna as apiExterna}\n            <tr>\n                <td> {apiExterna.country} </td>\n                <td> {apiExterna.year} </td>\n                <td> {apiExterna['gdamalt']} </td>\n                <td> {apiExterna['gdabarley']} </td>\n                <td> {apiExterna['gdaoat']} </td>\n                <td> {apiExterna['gdawaste']} </td>\n                <td> {apiExterna['gdaethylalcohol']} </td>\n            </tr>\n            {/each}\n        </tbody>\n    </Table>\n{/await}      \t\n\n  </figure>\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>\n\n\n",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"http://sos1920-08.herokuapp.com/api/v2/electricity-produced-stats/\";\n\n    let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n    console.log(\"Loading integration API 8...\");\t\n\tconst res = await fetch(url); \n\tif (res.ok) {\n\t\tconsole.log(\"Ok, loaded successfully\");\n\t\tconst json = await res.json();\n        apiExterna = json;\n\t} else {\n\t\tconsole.log(\"ERROR!\");\n    }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"hidroeléctrico\", \"solar\", \"carbon\"];\n        let valores = [];\n        let valor = {};\n        MyData.forEach((r) => {\n            if(r.year==2015){\n            valor = {\n                   name: r.province,\n                   data: [r.metropolitan, r.urban, r.rest, 0, 0, 0]\n               }\n            valores.push(valor);\n            }\n        });\n        apiExterna.forEach( (v) => {           \n               valor = {\n                   name: v.state,\n                   data: [0, 0, 0, v['hydro']/20000, v['solar']/20000, v['coal']/20000]\n               }\n               \n               valores.push(valor);\n            \n            \n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API 08'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i> </Button>\n</p>\n\n<figure class=\"highcharts-figure\">\n    {#await  apiExterna}\n    Loading renewable sources...\n    {:then  apiExterna}\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p>   </p>\n        <p class=\"highcharts-description\">\n            Se ha tenido que disminuir el valor de la api externa ya que impedía que los datos de la api interna pudieran aparecen en la gráfica\n        </p>\n        <p> <strong> Tabla con los datos proporcionados por la API 08 </strong> </p>\n\n    </figure>\t    \n\n    <Table bordered>\n        <thead>\n            <tr>\n                <th> País </th>\n                <th> Año </th>\n                <th> Hidroeléctrico</th>\n                <th> Solar </th>\n                <th> Carbon </th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each  apiExterna as apiExterna}\n            <tr>\n                <td> {apiExterna.province} </td>\n                <td> {apiExterna.year} </td>\n                <td> {apiExterna['hydro']} </td>\n                <td> {apiExterna['solar']} </td>\n                <td> {apiExterna['coal']} </td>\n            </tr>\n            {/each}\n        </tbody>\n    </Table>\n{/await}      \t\n\n  </figure>\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"https://sos1920-09.herokuapp.com/api/v2/oil-coal-nuclear-energy-consumption-stats/\";\n\n    let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n        console.log(\"Loading integration API 9...\");\t\n\t\tconst res = await fetch(url); \n\t\tif (res.ok) {\n\t\t\tconsole.log(\"Ok, loaded successfully\");\n\t\t\tconst json = await res.json();\n            apiExterna = json;\n\t\t} else {\n\t\t\tconsole.log(\"ERROR!\");\n        }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"Consumo Petroleo\", \"Consumo Carbon\", \"Consumo E. Nuclear\"];\n        let valores = [];\n        let valor = {};\n        MyData.forEach((r) => {\n            if(r.year==2015){\n            valor = {\n                   name: r.province,\n                   data: [r.metropolitan, r.urban, r.rest, 0, 0, 0]\n               }\n            valores.push(valor);\n            }\n        });\n        apiExterna.forEach((v) => {         \n            if(v.year==2016){  \n               valor = {\n                   name: v.country,\n                   data: [0, 0, 0, v['oil-consumption'], v['coal-consumption'], v['nuclear-energy-consumption']]\n               }\n               \n               valores.push(valor);\n            }\n            \n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API 09'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i> </Button>\n</p>\n\n<figure class=\"highcharts-figure\">\n                      \n    {#await  apiExterna}\n    Loading renewable sources...\n    {:then  apiExterna}\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p>   </p>\n        <p class=\"highcharts-description\">\n            Insertar texto\n        </p>\n        <p> <strong> Tabla con los datos proporcionados por la API 09 </strong> </p>\n\n    </figure>\t\n\n    \n\n    <Table bordered>\n        <thead>\n            <tr>\n                <th> País </th>\n                <th> Año </th>\n                <th> Consumo Petroleo</th>\n                <th> Consumo Carbon </th>\n                <th> Consumo E. Nuclear </th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each  apiExterna as apiExterna}\n            <tr>\n                <td> {apiExterna.country} </td>\n                <td> {apiExterna.year} </td>\n                <td> {apiExterna['oil-consumption']} </td>\n                <td> {apiExterna['coal-consumption']} </td>\n                <td> {apiExterna['nuclear-energy-consumption']} </td>\n            </tr>\n            {/each}\n        </tbody>\n    </Table>\n{/await}      \t\n            \n        \n\n  </figure>\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"https://sos1920-12.herokuapp.com/api/v2/overdose-deaths\";\n\n    let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n        console.log(\"Loading integration API 12...\");\t\n\t\tconst res = await fetch(url); \n\t\tif (res.ok) {\n\t\t\tconsole.log(\"Ok, loaded successfully\");\n\t\t\tconst json = await res.json();\n            apiExterna = json;\n\t\t} else {\n\t\t\tconsole.log(\"ERROR!\");\n        }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"Muertes Masculinas\", \"Muertes Femeninas\", \n        \"Muertes Totales\", \"Edad Media\"];\n        let valores = [];\n        let valor = {};\n        MyData.forEach((r) => {\n            if(r.year==2015){\n            valor = {\n                   name: r.province,\n                   data: [r.metropolitan, r.urban, r.rest, 0, 0, 0, 0]\n               }\n            valores.push(valor);\n            }\n        });\n        apiExterna.forEach( (v) => {   \n            if(v.year==2015){        \n               valor = {\n                   name: v.country,\n                   data: [0, 0, 0, v['death_male'], v['death_female'], v['death_total'],v['mean_age']]\n               }\n               valores.push(valor);            \n            }\n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API 12'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i> </Button>\n</p>\n\n{#await  apiExterna}\nLoading renewable sources...\n{:then  apiExterna}\n<figure class=\"highcharts-figure\">\n    <div id=\"container\"></div>\n    <p>   </p>\n    <p class=\"highcharts-description\">\n        Insertar texto\n    </p>\n    <p> <strong> Tabla con los datos proporcionados por la API 12</strong> </p>\n\n</figure>\t    \n\n<Table bordered>\n    <thead>\n        <tr>\n            <th> Provincia </th>\n            <th> Año </th>\n            <th> Muertes Masculinas</th>\n            <th> Muertes Femeninas </th>\n            <th> Muertes Totales </th>\n            <th> Edad Media </th>\n        </tr>\n    </thead>\n    <tbody>\n        {#each  apiExterna as apiExterna}\n        <tr>\n            <td> {apiExterna.province} </td>\n            <td> {apiExterna.year} </td>\n            <td> {apiExterna['death_male']} </td>\n            <td> {apiExterna['death_female']} </td>\n            <td> {apiExterna['death_total']} </td>\n            <td> {apiExterna['mean_age']} </td>\n        </tr>\n        {/each}\n    </tbody>\n</Table>\n{/await}      \t\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>\n\n\n",
    "<script>\n\timport  {onMount} from \"svelte\";\n\timport {pop} from \"svelte-spa-router\";\n\timport Table from \"sveltestrap/src/Table.svelte\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n    \n    const url = \"http://sos1920-27.herokuapp.com/api/v2/spc-stats/\";\n\n        let apiExterna = [];\n    let MyData = [];\n\tasync function loadGraph(){\n        console.log(\"Loading integration API 7...\");\t\n\t\tconst res = await fetch(url); \n\t\tif (res.ok) {\n\t\t\tconsole.log(\"Ok, loaded successfully\");\n\t\t\tconst json = await res.json();\n            apiExterna = json;\n\t\t} else {\n\t\t\tconsole.log(\"ERROR!\");\n        }\n        const resData = await fetch(\"/api/v2/evolution-of-cycling-routes\");\n        MyData = await resData.json();\n        let items = [\"Metropolitano\", \"Urbano\", \"Resto\", \"Rango Masculino\", \"Rango Femenino\", \"Ratio\"];\n        let valores = [];\n        let valor = {};\n        MyData.forEach((r) => {\n            //if(r.year==2015){\n            valor = {\n                   name: r.province,\n                   data: [r.metropolitan, r.urban, r.rest, 0, 0, 0]\n               }\n            valores.push(valor);\n            //}\n        });\n        apiExterna.forEach( (v) => {           \n               valor = {\n                   name: v.country,\n                   data: [0, 0, 0, v['male_rank'], v['female_rank'], v['ratio']]\n               }\n               \n               valores.push(valor);\n            \n            \n        });\n\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Integración API 07'\n            },\n            subtitle: {\n                text: ''\n            },\n            xAxis: {\n                categories: items,\n                tickmarkPlacement: 'on',\n                title: {\n                    enabled: false\n                }\n            },\n            yAxis: {\n                title: {\n                    text: ''\n                },\n                labels: {\n                    formatter: function () {\n                        return this.value ;\n                    }\n                }\n            },\n            tooltip: {\n                split: true,\n                valueSuffix: ''\n            },\n            plotOptions: {\n                area: {\n                    stacking: 'normal',\n                    lineColor: '#666666',\n                    lineWidth: 1,\n                    marker: {\n                        lineWidth: 1,\n                        lineColor: '#666666'\n                    }\n                }\n            },\n            series: valores\n        });\n\t};\n</script>\n\n<svelte:head>\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n</svelte:head>\n\n<p>\n    <Button outline color=\"secondary\" on:click=\"{pop}\"> <i class=\"fas fa-arrow-circle-left\"></i> </Button>\n</p>\n\n<figure class=\"highcharts-figure\">\n    {#await  apiExterna}\n    Loading renewable sources...\n    {:then  apiExterna}\n    <figure class=\"highcharts-figure\">\n        <div id=\"container\"></div>\n        <p>   </p>\n        <p class=\"highcharts-description\">\n            Insertar texto\n        </p>\n        <p> <strong> Tabla con los datos proporcionados por la API 27 </strong> </p>\n\n    </figure>\t    \n\n    <Table bordered>\n        <thead>\n            <tr>\n                <th> País </th>\n                <th> Ambos Sexos</th>\n                <th> Ranking Masculino </th>\n                <th> Números Masculinos </th>\n                <th> Ranking Femenino </th>\n                <th> Media </th>\n                <th> Año </th>\n                <th> Continente </th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each  apiExterna as apiExterna}\n            <tr>\n                <td> {apiExterna.country} </td>                \n                <td> {apiExterna['both_sex']} </td>\n                <td> {apiExterna['male_rank']} </td>\n                <td> {apiExterna['male_number']} </td>\n                <td> {apiExterna.year} </td>\n                <td> {apiExterna['female_rank']} </td>\n                <td> {apiExterna['female_number']} </td>\n                <td> {apiExterna['continent']} </td>\n            </tr>\n            {/each}\n        </tbody>\n    </Table>\n{/await}      \t\n\n  </figure>\n\n\n\n<style>\n\t#container {\n        height: 600px; \n}\n\n.highcharts-figure, .highcharts-data-table table {\n    min-width: 95%; \n        max-width: 100%;\n        margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #EBEBEB;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n.highcharts-data-table th {\n\tfont-weight: 600;\n    padding: 0.5em;\n}\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n    padding: 0.5em;\n}\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n\n</style>",
    "<script>\n\timport {pop} from \"svelte-spa-router\";\n    import Button from \"sveltestrap/src/Button.svelte\";\n\t\nasync function loadGraph() {\n\t\n\tlet MyData = [];\n\tlet MyDataGraph = [];\n\t\n\tconst resData = await fetch(\"/api/v2/rural-tourism-stats\");\n\tMyData = await resData.json();\n\tMyData.forEach( (x) => {\n            MyDataGraph.push({name: x.province + \" \" + x.year, data: [parseInt(x.traveller), parseInt(x.overnightstay), parseInt(x.averagestay)], pointPlacement: 'on'});\n        });\n\t\n\tHighcharts.chart('container', {\n\t\tchart: {\n\t\t\ttype: 'areaspline'\n\t\t},\n\t\ttitle: {\n\t\t\ttext: 'Turismo rural'\n\t\t},\n\t\t\n\t\txAxis: {\n\t\t\tcategories: [\n\t\t\t\t'Viajero',\n\t\t\t\t'Pernoctación',\n\t\t\t\t'Estancia media'\n\t\t\t],\n\t\t\tplotBands: [{ // visualize the weekend\n\t\t\t\tfrom: 4.5,\n\t\t\t\tto: 6.5,\n\t\t\t\tcolor: 'rgba(68, 170, 213, .2)'\n\t\t\t}]\n\t\t},\n\t\tyAxis: {\n\t\t\ttitle: {\n\t\t\t\ttext: 'Fruit units'\n\t\t\t}\n\t\t},\n\t\ttooltip: {\n\t\t\tshared: true,\n\t\t\tvalueSuffix: ' units'\n\t\t},\n\t\tcredits: {\n\t\t\tenabled: false\n\t\t},\n\t\tplotOptions: {\n\t\t\tareaspline: {\n\t\t\t\tfillOpacity: 0.5\n\t\t\t}\n\t\t},\n\t\tseries: MyDataGraph\n\t});\n}\n</script>\n\n<svelte:head>\n\t<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n\t<script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\n\t<script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\n\t<script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{loadGraph}\"></script>\n\t\n</svelte:head>\n\n\n<main>\n\t<h3 style=\"text-align: center;\"> <i class=\"fas fa-suitcase\"></i> Estadísticas del turismo rural</h3>\n\t\n\t<Button outline color=\"secondary\" on:click=\"{pop}\">Volver</Button>\n\t\n\t<figure class=\"highcharts-figure\">\n\t\t<div id=\"container\"></div>\n\t\t<p class=\"highcharts-description\">\n\t\t\tEn la gráfica podemos observar el número de: viajeros, pernoctaciones y estancia media del turismo rural en Andalucia.\n\t\t</p>\n\t</figure>\n\n</main>\n<style>\n\t#container {\n\t\theight: 400px; \n\t}\n\n\t.highcharts-figure, .highcharts-data-table table {\n\t\tmin-width: 310px; \n\t\tmax-width: 800px;\n\t\tmargin: 1em auto;\n\t}\n\n\t.highcharts-data-table table {\n\t\tfont-family: Verdana, sans-serif;\n\t\tborder-collapse: collapse;\n\t\tborder: 1px solid #EBEBEB;\n\t\tmargin: 10px auto;\n\t\ttext-align: center;\n\t\twidth: 100%;\n\t\tmax-width: 500px;\n\t}\n\t.highcharts-data-table caption {\n\t\tpadding: 1em 0;\n\t\tfont-size: 1.2em;\n\t\tcolor: #555;\n\t}\n\t.highcharts-data-table th {\n\t\tfont-weight: 600;\n\t\tpadding: 0.5em;\n\t}\n\t.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\n\t\tpadding: 0.5em;\n\t}\n\t.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\n\t\tbackground: #f8f8f8;\n\t}\n\t.highcharts-data-table tr:hover {\n\t\tbackground: #f1f7ff;\n\t}\n\n\n</style>"
  ],
  "names": [],
  "mappings": "AAkPI,SAAS,cAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,OAAO,KAAK,CACZ,UAAU,IAAI,AAClB,CAAC;ACpJD,kBAAkB,cAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC;ACVD,kBAAkB,cAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC;AC5CD,SAAS,eAAC,CAAC,AACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC;ACsFJ,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;AC7BA,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;AC3CA,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;AC5BA,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;ACnCA,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;AC3BA,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;ACxCA,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;AC1BA,UAAU,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,AACrB,CAAC,AAED,kBAAkB,4BAA+B,CAAC,AAC9C,SAAS,CAAE,GAAG,CACV,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,IAAI,AACxB,CAAC,AAuBD,sBAAsB,CAAC,mBAAK,CAAC,EAAE,cAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC;ACzGA,UAAU,eAAC,CAAC,AACX,MAAM,CAAE,KAAK,AACd,CAAC,AAED,kBAAkB,eAA+B,CAAC,AACjD,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AACjB,CAAC"
}